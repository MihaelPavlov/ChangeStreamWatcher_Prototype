@using ChangeStreamWatcher_Blazor.Services
@using ChangeStreamWatcher_Blazor.Data


@inject ChangeStreamWatcher watcher
@inject IQuantumConsoleLogger logger

<MudTable Items="Elements" Dense="false" Hover="true" Bordered="false" Striped="false">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Logs</MudText>
        <MudToolBarSpacer />
        <MudTextField T="string" ValueChanged="@(searchTerm => GetLogs(searchTerm))" Placeholder="Search By Operation Type"
                      Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search"
                      IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>_id</MudTh>
        <MudTh>Operation Type</MudTh>
        <MudTh>Full Document</MudTh>
    </HeaderContent>
    <RowTemplate>

        <MudTd DataLabel="_id">@context.Id</MudTd>

        @{
            if (context.OperationType == "Delete")
            {
                <MudTd DataLabel="Operation Type">
                    <MudChip Color="Color.Error">Delete</MudChip>
                </MudTd>
            }
            else if (context.OperationType == "Update")
            {
                <MudTd DataLabel="Operation Type">
                    <MudChip Color="Color.Success">Update</MudChip>
                </MudTd>
            }
            else if (context.OperationType == "Insert")
            {
                <MudTd DataLabel="Operation Type">
                    <MudChip Color="Color.Warning">Insert</MudChip>
                </MudTd>
            }
        }
        <MudTd DataLabel="full_document">@context.FullDocument</MudTd>


    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>


@code {

    public List<Log> Elements { get; set; }

    private string searchString = "";
    private List<Log> selectedItem1 = null;
    private List<Log> selectedItems = new List<Log>();

    protected override void OnInitialized()
    {
       var test= logger.Log(LogEventLevel.Information, "Test");
        GetLogs();
    }

    private bool FilterFunc(List<Log> logs) => Filter(searchString);

    public bool Filter(string searchString = null)
    {
        if (searchString != null)
        {
            return true;
        }
        return false;
    }
    public void GetLogs(string searchString = null)
    {
        var logs = watcher.GetCollectionByName("Logs");
        var list = new List<Log>();
        if (searchString != null)
        {
            foreach (var log in logs)
            {
                var logAr = log.ToArray().Select(x => x.Value.ToString()).ToArray();

                var newLog = new Log
                {
                    Id = logAr[0],
                    OperationType = logAr[1],
                    FullDocument = logAr[2],
                };
                if (newLog.OperationType == searchString)
                {

                    list.Add(newLog);
                }
            }


            this.Elements = list;
            return;
        }
        foreach (var log in logs)
        {
            var logAr = log.ToArray().Select(x => x.Value.ToString()).ToArray();

            var newLog = new Log
            {
                Id = logAr[0],
                OperationType = logAr[1],
                FullDocument = logAr[2],
            };
            list.Add(newLog);
        }


        this.Elements = list;
    }
}

