@using ChangeStreamWatcher_Blazor.Services
@using ChangeStreamWatcher_Blazor.Data
@using ChangeStreamWatcher_Blazor.Services.Enrichment
@using ChangeStreamWatcher_Blazor.Services.Mongo
@using ChangeStreamWatcher_Blazor.Services.Internal
@using MongoDB.Driver
@using MongoDB.Bson
@using System.Text.Json;
@using System.Text.Json.Serialization;
@using System.Linq;
@using System.Collections.Generic;
@using System.Reflection;

@inject ChangeStreamWatcher watcher


<MudTable Items="@Elements" Hover="true" Breakpoint="Breakpoint.Sm">
    <ColGroup>
        <col style="width:300px;" />
        <col style="width:100px;" />
        <col />
        <col style="width:100px;" />
    </ColGroup>
    <HeaderContent>
        <MudTh></MudTh>
        <MudTh>Id</MudTh>
        <MudTh>Operation Type</MudTh>
        <MudTh>Full Document</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd><MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="@(() => ShowBtnPress(context.Id))">@((context.ShowDetails == true)? "Hide" : "Show") Full Document Details</MudButton></MudTd>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Name">@context.OperationType</MudTd>
        <MudTd DataLabel="Full Document">@context.FullDocument</MudTd>
    </RowTemplate>
    <ChildRowContent>
        @if (context.ShowDetails)
        {
            <MudTr>
                <td colspan="4">
                    <MudCard Elevation="0">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.body1">Full Document Details for <strong>@context.Id</strong></MudText>
                            </CardHeaderContent>
                        </MudCardHeader>

                        <MudCardContent Class="pa-0">
                            @*<MudTable Items="@context.FullDocumentDeserialize" Context="fullDoc" Hover="true" Breakpoint="Breakpoint.Sm" Elevation="0">
                                    <ColGroup>
                                        <col />
                                        <col />
                                        <col style="width:200px;" />
                                    </ColGroup>
                                    <HeaderContent>
                                        <MudTh>StudentId</MudTh>
                                        <MudTh>FirstName</MudTh>
                                        <MudTh>LastName</MudTh>
                                        <MudTh>Test</MudTh>
                                    </HeaderContent>
                                    <RowTemplate>
                                        <MudTd DataLabel="StudentId">@fullDoc.StudentId</MudTd>
                                        <MudTd DataLabel="FirstName">@fullDoc.FirstName</MudTd>
                                        <MudTd DataLabel="LastName">@fullDoc.LastName</MudTd>
                                        <MudTd DataLabel="Test">@fullDoc.Test</MudTd>
                                    </RowTemplate>
                                </MudTable>*@
                            <MudTh>StudentId</MudTh>
                            <MudTh>FirstName</MudTh>
                            <MudTh>LastName</MudTh>
                            <MudTh>Test</MudTh>
                            <p>
                                <br /> 
                            </p>
                            <MudTd DataLabel="StudentId">@context.FullDocumentDeserialize.StudentId</MudTd>
                            <MudTd DataLabel="FirstName">@context.FullDocumentDeserialize.FirstName</MudTd>
                            <MudTd DataLabel="LastName">@context.FullDocumentDeserialize.LastName</MudTd>
                            <MudTd DataLabel="Test">@context.FullDocumentDeserialize.Test</MudTd>


                        </MudCardContent>
                    </MudCard>
                </td>
            </MudTr>
        }
    </ChildRowContent>
</MudTable>


@*<MudTable Items="Elements" Dense="false" Hover="true" Bordered="false" Striped="false">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Logs</MudText>
            <MudToolBarSpacer />
            <MudTextField T="string" ValueChanged="@(searchTerm => GetLogs(searchTerm))" Placeholder="Search By Operation Type"
                          Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search"
                          IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>_id</MudTh>
            <MudTh>Operation Type</MudTh>
            @foreach (var item in Elements.OrderByDescending(x=> x.KeyValuePairs.Keys.Count()))
            {
                foreach (var item2 in item.KeyValuePairs)
                {
                    <MudTh>@item2.Key.ToString()</MudTh>
                }
                break;
            }
        </HeaderContent>
        <RowTemplate>

            <MudTd DataLabel="_id">@context.Id</MudTd>

            @{
                if (context.OperationType == "Delete")
                {
                    <MudTd DataLabel="Operation Type">
                        <MudChip Color="Color.Error">Delete</MudChip>
                    </MudTd>
                }
                else if (context.OperationType == "Update")
                {
                    <MudTd DataLabel="Operation Type">
                        <MudChip Color="Color.Success">Update</MudChip>
                    </MudTd>
                }
                else if (context.OperationType == "Insert")
                {
                    <MudTd DataLabel="Operation Type">
                        <MudChip Color="Color.Warning">Insert</MudChip>
                    </MudTd>
                }
            }
            @foreach (var item in Elements)
            {
                if (item.Id == context.Id)
                {

                    foreach (var item2 in item.KeyValuePairs)
                    {

                        <MudTd>@item2.Value </MudTd>

                    }
                }
            }



        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>*@


<h3>LogStreamTaskOverview</h3>
<MudButton OnClick="CreateTenant">Create Tenant</MudButton>
<MudButton OnClick="CreateCabinet">Create Cabinet</MudButton>


<MudTable Items="this.Logs" Dense="false" Hover="true" Bordered="false" Striped="false">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Logs</MudText>
        <MudToolBarSpacer />
    </ToolBarContent>
    <HeaderContent>
        <MudTh>_id</MudTh>
        <MudTh>Time</MudTh>
        <MudTh>Severity</MudTh>
        <MudTh>Message</MudTh>
    </HeaderContent>
    <RowTemplate>

        <MudTd DataLabel="_id">@context.IpAddress</MudTd>
        <MudTd DataLabel="Message">@context.Timestamp</MudTd>
        <MudTd DataLabel="Message">@context.Severity</MudTd>
        <MudTd DataLabel="Message">@context.Message</MudTd>



    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>


@code {

    public List<Log> Elements { get; set; }

    private string searchString = "";
    private List<Log> selectedItem1 = null;
    private List<Log> selectedItems = new List<Log>();

    public List<MongoLogDocument> Logs { get; set; }
    public MongoLoggerService<ObjectId> MongoLoggerService { get; set; }
    public MongoDbEmitter<ObjectId> MongoDbEmitter { get; set; }

    private void ShowBtnPress(string id)
    {
        var item = Elements.First(f => f.Id == id);
        item.ShowDetails = !item.ShowDetails;
    }

    protected override async Task OnInitializedAsync()
    {
        GetLogs();
        ///summary
        /// Get database information , Clients , Databases ,
        ///summary
        MongoClient dbClient = new MongoClient("mongodb://localhost:27017/TestDatabase");
        MongoClient dbClientLogs = new MongoClient("mongodb://localhost:27017/Logs-01");

        var databaseTenants = dbClient.GetDatabase("TestData");
        var databaseLogs = dbClientLogs.GetDatabase("Logs");


        ///summary
        /// To Initialize the MongoLoggerService we need ->
        /// enricher ->
        /// MongoLogDocumentFactory -> create MongoLogDocument FromMessage and FromException
        /// MongoDBEmitter -> To Initiazlize we need -> Emitter is using to push all created log for the day in the database
        ///     -> TenantInformationDistributor
        ///     -> DateTimeServer
        ///     -> QuantumConsoleLogger
        /// TenantInformationDistributor
        /// QuantumConsoleLogger
        ///summary
        var enricher = new EmptyEnricher();
        var logFactory = new MongoLogDocumentFactory();
        var dateTimeServer = new DateTimeServer();
        var quantumConsoleLogger = new QuantumConsoleLogger();
        var infoDistributor = new InformationDistributor<ObjectId>();

        var info = new Information<ObjectId>();
        info.Id = new ObjectId("6156bd78f75ad19e706597e9");
        info.MongoClient = dbClient;
        info.MainDatabase = databaseTenants;
        info.LogsDatabase = databaseLogs;
        infoDistributor.Provide(info);
        var emitter = new MongoDbEmitter<ObjectId>(infoDistributor, dateTimeServer, quantumConsoleLogger);


        var mongoServece = new MongoLoggerService<ObjectId>(enricher, logFactory, emitter, infoDistributor, quantumConsoleLogger);
        this.MongoLoggerService = mongoServece;
        this.MongoDbEmitter = emitter;

    }
    public void CreateCabinet()
    {
        //create cabinet
        this.MongoLoggerService.Log(LogEventLevel.Verbose, "Create Cabinet");

    }
    public async Task CreateTenant()
    {
        //create Tenant
        this.MongoLoggerService.Log(LogEventLevel.Verbose, "Create Tenant");
        await this.MongoLoggerService.EmitAllLogsAsync(System.Threading.CancellationToken.None);
        await GetAllLogs();


    }
    public async Task GetAllLogs()
    {
        var result = await this.MongoDbEmitter.GetLogs();
        this.Logs = result.Select(x => new MongoLogDocument
        {
            Message = x.Message,
            Timestamp = x.Timestamp,
            Severity = x.Severity,
            IpAddress = x.IpAddress,
        }).ToList();
    }

    private bool FilterFunc(List<Log> logs) => Filter(searchString);

    public bool Filter(string searchString = null)
    {
        if (searchString != null)
        {
            return true;
        }
        return false;
    }
    public void GetLogs(string searchString = null)
    {
        var logs = watcher.GetCollectionByName("Logs");
        var list = new List<Log>();
        if (searchString != null)
        {
            foreach (var log in logs)
            {
                var logAr = log.ToArray().Select(x => x.Value.ToString()).ToArray();


                var dotNetObj = BsonTypeMapper.MapToDotNetValue(logAr[2]);
                var json = JsonSerializer.Serialize(dotNetObj);

                var serializeObject = JsonSerializer.Deserialize<Dictionary<string, object>>(json);

                var newLog = new Log
                {
                    ShowDetails = false,
                    Id = logAr[0],
                    OperationType = logAr[1],
                };
                if (newLog.OperationType == searchString)
                {

                    list.Add(newLog);
                }
            }


            this.Elements = list;
            return;
        }
        foreach (var log in logs)
        {
            var kvp = log.GetValue("FullDocumentDeserialize");
            var logAr = log.ToArray().Select(x => x.Value.ToString()).ToArray();
            var dotNetObj = BsonTypeMapper.MapToDotNetValue(kvp);
            var json = JsonSerializer.Serialize(dotNetObj);

            if (json != null)
            {

                var result = JsonSerializer.Deserialize<FullDocument>(json);
                var newLog = new Log
                {
                    ShowDetails = false,
                    Id = logAr[0],
                    OperationType = logAr[2],
                    FullDocument = logAr[3],
                    FullDocumentDeserialize = result,
                };
                list.Add(newLog);
            }
        }
        this.Elements = list;
    }


}

